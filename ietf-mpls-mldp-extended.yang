module ietf-mpls-mldp-extended {
  namespace "urn:ietf:params:xml:ns:yang:ietf-mpls-mldp-extended";
  prefix "mldp-ext";

  import ietf-inet-types {
    prefix "inet";
  }

  import ietf-routing {
    prefix "rt";
  }

  import ietf-mpls-ldp {
    prefix "ldp";
  }

  import ietf-mpls-ldp-extended {
    prefix "ldp-ext";
  }

  import ietf-mpls-mldp {
    prefix "mldp";
  }

  organization
    "IETF MPLS Working Group";
  contact
    "WG Web:   <http://tools.ietf.org/wg/teas/>
     WG List:  <mailto:teas@ietf.org>

     WG Chair: Loa Andersson
               <mailto:loa@pi.nu>

     WG Chair: Ross Callon
               <mailto:rcallon@juniper.net>

     WG Chair: George Swallow
               <mailto:swallow.ietf@gmail.com>

     Editor:   Kamran Raza
               <mailto:skraza@cisco.com>

     Editor:   Rajiv Asati
               <mailto:rajiva@cisco.com>

     Editor:   Xufeng Liu
               <mailto:Xufeng_Liu@jabil.com>

     Editor:   Santosh Esale
               <mailto:sesale@juniper.net>

     Editor:   Xia Chen
               <mailto:jescia.chenxia@huawei.com>

     Editor:   Himanshu Shah
               <mailto:hshah@ciena.com>";

  description
    "This YANG module defines the essential components for the
     management of Multi-Protocol Label Switching (MPLS) Multipoint
     LDP (mLDP).";

  revision 2017-03-07 {
    description
      "Initial revision.";
    reference
      "RFC XXXX: YANG Data Model for MPLS mLDP.";
  }

  /*
   * Features
   */
  feature capability-mldp-hsmp {
    description
      "This feature indicates that the system allows to configure
       mLDP hub-and-spoke-multipoint capability.";
  }

  feature capability-mldp-node-protection {
    description
      "This feature indicates that the system allows to configure
       mLDP node-protection capability.";
  }

  feature mldp-mofrr {
    description
      "This feature indicates that the system supports mLDP
       Multicast only FRR (MoFRR).";
  }

  /*
   * Typedefs
   */

  /*
   * Groupings
   */
  grouping mldp-ext-capabilities {
    description
      "mLDP extended capabilities.";
    container hub-and-spoke {
      if-feature capability-mldp-hsmp;
      description
        "Configure hub-and-spoke-multipoint capability.";
      reference
        "RFC7140: LDP Extensions for Hub and Spoke Multipoint
         Label Switched Path";
      leaf enable {
        type boolean;
        description
          "Enable hub-and-spoke-multipoint.";
      }
    }
    container node-protection {
      if-feature capability-mldp-node-protection;
      description
        "Configure node-protection capability.";
      reference
        "RFC7715: mLDP Node Protection.";
      leaf plr {
        type boolean;
        description
          "Point of Local Repair capable for MP LSP node
           protection.";
      }
      container merge-point {
        description
          "Merge Point capable for MP LSP node protection.";
        leaf enable {
          type boolean;
          description
            "Enable merge point capability.";
        }
        leaf targeted-session-teardown-delay {
          type uint16;
          units seconds;
          description
            "Targeted session teardown delay.";
        }
      } // merge-point
    }
  } // mldp-ext-capabilities

  grouping  mldp-ipv4-configured-lsp-roots {
    description
      "mLDP IPv4 roots containers.";

    container roots {
      description
        "Configured IPv4 multicast LSPs.";
      list root {
        key "root-address";
        description
          "List of roots for configured multicast LSPs.";

        leaf root-address {
          type inet:ipv4-address;
          description
            "Root address.";
        }

        list lsp {
          must "(lsp-id = 0 and source-address != '0.0.0.0' and "
            + "group-address != '0.0.0.0') or "
            + "(lsp-id != 0 and source-address = '0.0.0.0' and "
            + "group-address = '0.0.0.0')" {
            description
              "A LSP can be identified by either <lsp-id> or
               <source-address, group-address>.";
          }
          key "lsp-id source-address group-address";
          description
            "List of LSPs.";
          leaf lsp-id {
            type uint16;
            description "ID to identify the LSP.";
          }
          leaf source-address {
            type inet:ipv4-address;
            description
              "Source address.";
          }
          leaf group-address {
            type inet:ipv4-address-no-zone;
            description
              "Group address.";
          }
        } // list lsp
      } // list root
    } // roots
  } // mldp-ipv4-configured-lsp-roots

  grouping  mldp-ipv6-configured-lsp-roots {
    description
      "mLDP IPv6 roots containers.";

    container roots {
      description
        "Configured IPv6 multicast LSPs.";

      list root {
        key "root-address";
        description
          "List of roots for configured multicast LSPs.";

        leaf root-address {
          type inet:ipv6-address;
          description
            "Root address.";
        }

        list lsp {
          must "(lsp-id = 0 and source-address != '::' and "
            + "group-address != '::') or "
            + "(lsp-id != 0 and source-address = '::' and "
            + "group-address = '::')" {
            description
              "A LSP can be identified by either <lsp-id> or
               <source-address, group-address>.";
          }
          key "lsp-id source-address group-address";
          description
            "List of LSPs.";
          leaf lsp-id {
            type uint16;
            description "ID to identify the LSP.";
          }
          leaf source-address {
            type inet:ipv6-address;
            description
              "Source address.";
          }
          leaf group-address {
            type inet:ipv6-address-no-zone;
            description
              "Group address.";
          }
        } // list lsp
      } // list root
    } // roots
  } // mldp-ipv6-configured-lsp-roots

  grouping mldp-ext-per-af-config-attibutes {
    description
      "mLDP per address family configuration attibutes.";
    container multicast-only-frr {
      if-feature mldp-mofrr;
      description
        "Multicast only FRR (MoFRR) policy.";
      leaf prefix-list {
        type ldp-ext:prefix-list-ref;
        description
          "Enables MoFRR for the specified access list.";
      }
    } // multicast-only-frr
    container recursive-fec {
      description
        "Recursive FEC policy.";
      leaf prefix-list {
        type ldp-ext:prefix-list-ref;
        description
          "Enables recursive FEC for the specified access list.";
      }
    } // recursive-for
  } // mldp-ext-per-af-config-attibutes

  /*
   * Configuration data nodes
   */
  // Global capability config
  augment "/rt:routing/rt:control-plane-protocols/"
    + "ldp:mpls-ldp/ldp:global/ldp:config/ldp:capability/"
    + "mldp:mldp" {
    description "Augmentation for MLDP global capability.";

    uses mldp-ext-capabilities;
  }

  // IPv4 config
  augment "/rt:routing/rt:control-plane-protocols/"
    + "ldp:mpls-ldp/ldp:global/mldp:mldp/mldp:address-families/"
    + "mldp:ipv4" {
    description "Augmentation for MLDP IPv4 configuration.";
    container config {
      description
        "Configuration data.";
      uses mldp-ext-per-af-config-attibutes;
    }
  }

  // IPv6 config
  augment "/rt:routing/rt:control-plane-protocols/"
    + "ldp:mpls-ldp/ldp:global/mldp:mldp/mldp:address-families/"
    + "mldp:ipv6" {
    description "Augmentation for MLDP IPv4 configuration.";
    container config {
      description
        "Configuration data.";
      uses mldp-ext-per-af-config-attibutes;
    }
  }

  // Global forwarding-nexthop config
  augment "/rt:routing/rt:control-plane-protocols/"
    + "ldp:mpls-ldp/ldp:global/ldp-ext:forwarding-nexthop/"
    + "ldp-ext:interfaces/ldp-ext:interface/ldp-ext:address-family/"
    + "ldp-ext:config" {
    description
      "Augmentation for MLDP nexthop forwarding interface.";
    leaf mldp-disable {
      type boolean;
      description
        "Disable mLDP forwarding on the interface.";
    }
  }

  /*
   * Operational state data nodes
   */
  // Global capability state
  augment "/rt:routing/rt:control-plane-protocols/"
    + "ldp:mpls-ldp/ldp:global/ldp:state/ldp:capability/"
    + "mldp:mldp" {
    description "Augmentation for MLDP global capability.";

    uses mldp-ext-capabilities;
  }

  // IPv4 state
  augment "/rt:routing/rt:control-plane-protocols/"
    + "ldp:mpls-ldp/ldp:global/mldp:mldp/mldp:address-families/"
    + "mldp:ipv4/mldp:state" {
    description "Augmentation for MLDP IPv4 configuration.";

    uses mldp-ext-per-af-config-attibutes;
  }

  // IPv6 state
  augment "/rt:routing/rt:control-plane-protocols/"
    + "ldp:mpls-ldp/ldp:global/mldp:mldp/mldp:address-families/"
    + "mldp:ipv6/mldp:state" {
    description "Augmentation for MLDP IPv4 configuration.";

    uses mldp-ext-per-af-config-attibutes;
  }

  // Global forwarding-nexthop config
  augment "/rt:routing/rt:control-plane-protocols/"
    + "ldp:mpls-ldp/ldp:global/ldp-ext:forwarding-nexthop/"
    + "ldp-ext:interfaces/ldp-ext:interface/ldp-ext:address-family/"
    + "ldp-ext:state" {
    description
      "Augmentation for MLDP nexthop forwarding interface.";
    leaf mldp-disable {
      type boolean;
      description
        "Disable mLDP forwarding on the interface.";
    }
  }

  // Peer capability state
  augment "/rt:routing/rt:control-plane-protocols/"
    + "ldp:mpls-ldp/ldp:peers/ldp:peer/ldp:state/"
    + "ldp:received-peer-state/ldp:capability/mldp:mldp" {
    description
      "Augmentation for MLDP received peer state capability.";
    container hub-and-spoke {
      description
        "Configure hub-and-spoke-multipoint capability.";
      reference
        "RFC7140: LDP Extensions for Hub and Spoke Multipoint
         Label Switched Path";
      leaf enable {
        type boolean;
        description
          "Enable hub-and-spoke-multipoint.";
      }
    }
    container node-protection {
      description
        "Configure node-protection capability.";
      reference
        "RFC7715: mLDP Node Protection.";
      leaf plr {
        type boolean;
        description
          "Point of Local Repair capable for MP LSP node
           protection.";
      }
      leaf merge-point {
        type boolean;
        description
          "Merge Point capable for MP LSP node protection.";
      } // merge-point
    } // node-protection
  }

  /*
   * Per AF augmentation
   */
  // IPv4 configured-leaf-lsps
  augment "/rt:routing/rt:control-plane-protocols/"
    + "ldp:mpls-ldp/ldp:global/mldp:mldp/mldp:address-families/"
    + "mldp:ipv4" {
    description "Augmentation for MLDP IPv4 configured leaf LSPs.";
    container configured-leaf-lsps {
      description
        "Configured multicast LSPs.";

      container p2mp {
        description
          "Configured point-to-multipoint LSPs.";
        uses mldp-ipv4-configured-lsp-roots;
      }
      container mp2mp {
        description
          "Configured multipoint-to-multipoint LSPs.";
        uses mldp-ipv4-configured-lsp-roots;
      }
    } // configured-leaf-lsps
  }

  // IPv6 configured-leaf-lsps
  augment "/rt:routing/rt:control-plane-protocols/"
    + "ldp:mpls-ldp/ldp:global/mldp:mldp/mldp:address-families/"
    + "mldp:ipv6" {
    description "Augmentation for MLDP IPv4 configured leaf LSPs.";
    container configured-leaf-lsps {
      description
        "Configured multicast LSPs.";

      container p2mp {
        description
          "Configured point-to-multipoint LSPs.";
        uses mldp-ipv6-configured-lsp-roots;
      }
      container mp2mp {
        description
          "Configured multipoint-to-multipoint LSPs.";
        uses mldp-ipv6-configured-lsp-roots;
      }
    } // configured-leaf-lsps
  }

  /*
   * Global augmentation
   */

  /*
   * Notifications
   */

}
